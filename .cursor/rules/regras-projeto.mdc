---
description: Diretrizes Técnicas para Desenvolvimento Modular
globs: 
alwaysApply: true
version: 2.1
priority: 1000
---

# 🧠 Arquitetura do Projeto

## 🎯 Objetivo Estratégico
```mermaid
graph LR
  A[Código Limpo] --> B[Manutenibilidade]
  A --> C[Escalabilidade]
  B --> D[Documentação Clara]
  C --> E[Design Modular]
```

## 📌 Princípios Técnicos

### 🔄 Modularidade
```ts
// Estrutura de módulo padrão
interface Modulo {
  nome: string;
  responsabilidade: string;
  interface: string[];
  dependencias: Modulo[];
}
```

### 📏 Métricas de Qualidade
| Métrica            | Aceitável   | Ideal      |
|---------------------|-------------|------------|
| Complexidade Ciclomática | ≤15       | ≤10        |
| Acoplamento         | Baixo       | Mínimo     |
| Coesão              | Alta        | Máxima     |
| Linhas por Arquivo  | ≤300        | ≤150       |

## 🛠️ Padrões de Implementação

### 📚 Boas Práticas
```ts
// Exemplo de função bem documentada
/**
 * Calcula consumo energético mensal
 * @param leituras Array de medições diárias (kWh)
 * @returns Objeto com total e média diária
 */
function calcularConsumo(leituras: number[]) {
  // Implementação...
}
```

### 🔍 Fluxo de Debugging
```mermaid
sequenceDiagram
  participante Dev
  participante Sistema
  Dev->>Sistema: Identifica erro
  Sistema->>Dev: Logs detalhados
  Dev->>Sistema: Adiciona instrumentação
  Sistema->>Dev: Dados de execução
  Dev->>Sistema: Implementa correção
```

## 🤖 Integração com IA

### Workflow de Validação
1. Geração de código pela IA
2. Análise estática (ESLint/TypeScript)
3. Revisão de padrões arquiteturais
4. Testes unitários automatizados
5. Aprovação manual final

## 🔄 Ciclo de Vida do Código
```mermaid
graph TD
  A[Planejamento] --> B[Implementação]
  B --> C[Revisão]
  C --> D[Testes]
  D --> E[Documentação]
  E --> F[Deploy]
  F --> G[Monitoramento]
```

## ✅ Checklist de Code Review
- [ ] Atende aos padrões de estilo
- [ ] Passa em todos os testes
- [ ] Documentação atualizada
- [ ] Métricas de qualidade dentro dos limites
- [ ] Compatibilidade cross-ambiente

## 🚀 Estratégia de Deploy
| Ambiente | Pipeline               | Validações Obrigatórias       |
|----------|------------------------|-------------------------------|
| Dev      | CI Básico              | Linting, Testes Unitários     |
| Test     | CI Completo            | Testes de Integração, E2E     |
| Prod     | CD com Approvals       | Security Scan, Load Testing   |

## 📊 Monitoramento Pós-Deploy
```ts
interface MetricasProd {
  uptime: number;
  latency: number;
  errorRate: number;
  resourceUsage: {
    cpu: number;
    memory: number;
  };
}
```

## 📚 Política de Documentação
1. Docstrings em todas as funções
2. README por módulo
3. Diagramas de arquitetura atualizados
4. Guias de estilo específicos por tecnologia
5. Registro de decisões arquiteturais (ADR)
