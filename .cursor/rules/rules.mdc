---
description: Diretrizes T√©cnicas para Intera√ß√£o com IA no ModularOne
globs: "**/*"
alwaysApply: true
version: 2.1.1
priority: 1000
contact: "equipe-tecnica@modularone.com.br"
---

# üîç An√°lise de C√≥digo (AST Level)

## Fluxo de Compreens√£o
```mermaid
graph TD
  A[An√°lise L√©xica] --> B[Parse AST]
  B --> C[Mapa de Depend√™ncias]
  C --> D[Padr√µes Arquiteturais]
  D --> E[Relat√≥rio de Complexidade]
```

## Modelo de Diagn√≥stico
```ts
interface CodeAnalysis {
  id: string;
  severity: 1 | 2 | 3;
  category: 'security' | 'performance' | 'maintainability';
  location: {
    file: string;
    line: number;
    column: number;
  };
  suggestion: string;
  references: string[];
  metrics: {
    cyclomatic: number;
    cognitive: number;
    halstead: number;
  };
}
```

## Checklist de An√°lise
- [ ] Mapear depend√™ncias cruzadas
- [ ] Identificar code smells
- [ ] Calcular m√©tricas de complexidade
- [ ] Verificar viola√ß√µes de padr√µes
- [ ] Validar consist√™ncia arquitetural
```

# üèó Arquitetura & Padr√µes de C√≥digo

## Princ√≠pios SOLID Adaptados
```mermaid
graph LR
  S(SRP) -->|Uma responsabilidade| O(OCP)
  O -->|Extens√£o aberta| L(LSP)
  L -->|Substitui√ß√£o| I(ISP)
  I -->|Segrega√ß√£o| D(DIP)
  D -->|Invers√£o| S
```

## Implementa√ß√£o de Componentes
```ts
interface ComponentRules {
  naming: {
    prefix: string;
    pattern: 'PascalCase' | 'kebab-case';
    suffix?: 'Container' | 'Widget';
  };
  props: {
    validation: 'Zod' | 'Yup';
    typing: 'Strict' | 'Optional';
    defaults: 'Required' | 'Partial';
  };
  styling: 'Tailwind' | 'CSSModules';
  testing: {
    unit: 'Jest' | 'Vitest';
    coverage: number;
  };
}
```

## Checklist de Qualidade
- [ ] Atender aos princ√≠pios SOLID
- [ ] Seguir padr√µes de projeto adequados
- [ ] Manter coes√£o alta (‚â•80%)
- [ ] Limitar acoplamento (‚â§3 depend√™ncias)
- [ ] Implementar testes unit√°rios
- [ ] Documentar via TSdoc
```

# üîí Seguran√ßa & Boas Pr√°ticas

## Princ√≠pios Fundamentais
```mermaid
graph TD
  A[Seguran√ßa] --> B[Defesa em Profundidade]
  A --> C[Princ√≠pio do Menor Privil√©gio]
  A --> D[Valida√ß√£o Rigorosa]
  B --> E[Multi-factor Authentication]
  C --> F[Controle de Acesso Granular]
  D --> G[Sanitiza√ß√£o de Dados]
```

## Checklist Cr√≠tico
- [ ] Valida√ß√£o de inputs com Zod
- [ ] Sanitiza√ß√£o de dados antes do processamento
- [ ] Controle de acesso baseado em roles (RBAC)
- [ ] Logging n√£o sens√≠vel com m√°scara de dados
- [ ] Tratamento de erros sem expor detalhes internos
- [ ] Criptografia de dados sens√≠veis em repouso/tr√¢nsito
- [ ] Auditoria peri√≥dica de permiss√µes
- [ ] Rota√ß√£o de chaves de API

## Padr√µes de Seguran√ßa
```ts
// Modelo de Autentica√ß√£o Segura
interface AuthConfig {
  jwtSecret: string;
  sessionTimeout: number;
  passwordPolicy: {
    minLength: number;
    complexity: boolean;
    historyCheck: number;
  };
  mfa: {
    enabled: boolean;
    methods: ['sms', 'email', 'authenticator'];
  };
}

class AuthService {
  private async handleAuthFlow(
    credentials: SecureAuthPayload,
    context: AuthContext
  ) {
    // Implementa√ß√£o com valida√ß√£o em m√∫ltiplos n√≠veis
  }
}
```

## Fluxo de Autentica√ß√£o
```mermaid
sequenceDiagram
  participante User
  participante Frontend
  participante Backend
  User->>Frontend: Insere credenciais
  Frontend->>Backend: Challenge criptografado
  Backend->>Frontend: Token JWT assinado
  Frontend->>User: Redirecionamento seguro
```

# üõ† Implementa√ß√£o & Testes

## Fluxo de Valida√ß√£o
```mermaid
graph TD
  A[An√°lise de Requisitos] --> B[Proposta T√©cnica]
  B --> C[Revis√£o com Dev]
  C --> D[Implementa√ß√£o Parcial]
  D --> E[Testes Automatizados]
  E --> F{Passou?}
  F -->|Sim| G[Implementa√ß√£o Completa]
  F -->|N√£o| H[Refatora√ß√£o]
```

## Implementa√ß√£o de Testes
```ts
// Exemplo de Teste Unit√°rio
describe('AuthService', () => {
  it('deve bloquear login ap√≥s 3 tentativas', async () => {
    const auth = new AuthService();
    
    // Tentativas falhas
    await auth.login({usuario: 'teste', senha: 'errada1'});
    await auth.login({usuario: 'teste', senha: 'errada2'});
    await auth.login({usuario: 'teste', senha: 'errada3'});

    // Quarta tentativa
    await expect(auth.login({usuario: 'teste', senha: 'correta'}))
      .rejects.toThrow('Conta bloqueada temporariamente');
  });
});
```

## Checklist de Qualidade de Testes
- [ ] Cobrir casos de sucesso e falha
- [ ] Testar valores limite
- [ ] Mockar depend√™ncias externas
- [ ] Garantir velocidade de execu√ß√£o
- [ ] Atualizar snapshots regularmente

## Padr√µes de Teste
| Tipo        | Boas Pr√°ticas                      | Anti-padr√µes                |
|-------------|------------------------------------|----------------------------|
| Unit√°rio    | Testes isolados e r√°pidos          | Mockar excessivamente       |
| Integra√ß√£o  | Testar fluxos completos            | Depender de dados externos |
| E2E         | Simular intera√ß√µes reais           | Testes fr√°geis/lentos       |

# üìÑ Formato de Respostas

## Template Estruturado
```markdown
## An√°lise do Problema
- Contexto atual
- Impacto estimado
- Componentes afetados

## Proposta de Solu√ß√£o
```ts
// Exemplo de implementa√ß√£o
function solu√ß√£oOtimizada(...args) {
  // ...
}
```

## Considera√ß√µes
- Trade-offs t√©cnicos
- Alternativas descartadas
- Riscos potenciais
```

# üîÑ Adapta√ß√£o ao Projeto

## Diretrizes de Evolu√ß√£o
1. **Versionamento Sem√¢ntico**  
   `MAJOR.MINOR.PATCH` com changelog detalhado

2. **Gest√£o de Depend√™ncias**  
   ```bash
   # Atualiza√ß√£o segura
   npm update --audit --fund
   ```

3. **Ambientes Multi-stage**  
   ```env
   # .env.production
   API_URL=https://api.prod.modularone.com
   DEBUG_MODE=false
   ```

# ‚úÖ Mecanismos de Valida√ß√£o

## Checklist de Qualidade
1. [ ] Documenta√ß√£o inline
2. [ ] Tipagem est√°tica
3. [ ] Testes unit√°rios
4. [ ] Compatibilidade cross-browser
5. [ ] Acessibilidade (WCAG 2.1)

## Indicadores de Performance
| M√©trica          | Aceit√°vel  | Ideal     |
|------------------|------------|-----------|
| TTI (s)         | ‚â§3        | ‚â§1        |
| CLS              | ‚â§0.1      | ‚â§0.05     |
| Mem√≥ria (MB)     | ‚â§500      | ‚â§200      |
