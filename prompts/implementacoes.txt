Preciso de assistência para expandir e refinar o formulário de criação e edição de Unidades Consumidoras (UCs) no frontend React/TypeScript.

**Arquivo Principal a ser Modificado:**
`src/pages/ucs/UCForm.tsx`

**Contexto:**
O formulário já utiliza `react-hook-form`, Zod para validação, e TanStack Query (`useQuery` para buscar dados da UC para edição e `useMutation` para criar/atualizar). No entanto, atualmente ele cobre apenas alguns campos. O objetivo é estendê-lo para incluir todos os campos relevantes da tabela `unidades_consumidoras` e refinar a lógica de manipulação de dados.

**Tarefas Detalhadas:**

1.  **Expandir Schema Zod (`ucSchema`):**
    * Modificar o `ucSchema` existente no arquivo para incluir validações para todos os campos da tabela `unidades_consumidoras` (conforme definido em `supabase/migrations/000_initial_schema.sql`).
    * Campos a serem considerados (lista não exaustiva, verificar schema completo): `cliente_id` (uuid, obrigatório), `planta_solar_id` (uuid, opcional/nulo), `identificador` (texto, obrigatório), `tipo_uc` (enum), `cep` (texto, formato regex), `logradouro`, `numero`, `complemento`, `bairro`, `municipio`, `uf` (enum), `latitude` (numérico, opcional/nulo), `longitude` (numérico, opcional/nulo), `status_uc` (enum, default 'Ativa'), `data_conexao` (data, opcional/nulo), `grupo_tarifario` (enum, opcional/nulo), `subgrupo_tarifario`, `modalidade_tarifaria`, `classe_consumo`, `subclasse_consumo`, `codigo_tarifa`, `demanda_contratada_ponta_kw` (numérico, opcional/nulo), `demanda_contratada_fora_ponta_kw` (numérico, opcional/nulo), `tensao_nominal_v` (inteiro, opcional/nulo), `tipo_medicao`, `numero_medidor`, `dados_adicionais_uc` (jsonb, opcional/nulo).
    * Definir e utilizar Zod enums para campos como `tipo_uc`, `status_uc`, `grupo_tarifario`, `uf`. Exemplo: `const TipoUCEnum = z.enum(['Residencial', 'Comercial', ...]);`
    * Utilizar `z.coerce.number()` para campos numéricos que vêm de inputs de texto, ou `z.number()` com transformação na submissão.
    * Para datas (`data_conexao`), usar `z.date()` e prever conversão para string 'YYYY-MM-DD' na submissão.
    * Usar `.nullable().optional()` conforme apropriado para campos não obrigatórios.

2.  **Atualizar Tipos TypeScript:**
    * Garantir que o tipo para os valores do formulário (`UCFormValuesFromZod`) seja inferido do `ucSchema` expandido: `type UCFormValuesFromZod = z.infer<typeof ucSchema>;`
    * Referenciar os tipos do Supabase (`Database['public']['Tables']['unidades_consumidoras']['Insert']` e `Update`) ao preparar os dados para as mutações.

3.  **Adicionar Campos ao JSX do Formulário:**
    * Para cada novo campo do schema Zod, adicionar o respectivo `FormField` no JSX do formulário, utilizando os componentes apropriados da biblioteca Shadcn/UI (`Input`, `Select`, `DatePicker` da Shadcn com `Calendar`, `Checkbox`, `Textarea` para `dados_adicionais_uc` se for JSON string).
    * **`cliente_id` e `planta_solar_id`:** Inicialmente, podem ser `Input` para o UUID. (Melhoria futura: `Select` com busca).
    * **Campos Enum (`tipo_uc`, `uf`, `status_uc`, `grupo_tarifario`):** Implementar usando o componente `Select` da Shadcn/UI, populado com as opções dos enums definidos.
    * **`data_conexao`:** Utilizar o `DatePicker` da Shadcn/UI (composto por `Popover` e `Calendar`). O valor no estado do formulário deve ser um objeto `Date`.
    * **Campos Numéricos (`latitude`, `longitude`, `demanda_contratada*`, `tensao_nominal_v`):** Usar `<Input type="number" />`. Tratar a conversão para `number` ou `null` (se vazio) na lógica do formulário ou na submissão.
    * **CEP:** Adicionar máscara ou validação de formato visual, se possível, além da validação Zod.

4.  **Refinar Lógica de Manipulação de Dados:**
    * **Carregamento para Edição (`useEffect` com `ucData`):**
        * Ao popular o formulário com `form.reset(formData)`, garantir que os dados vindos do backend (`ucData`) sejam transformados para os tipos esperados pelo formulário.
        * Especificamente, converter strings de data (ex: `ucData.data_conexao`) para objetos `Date` para o `DatePicker`.
        * Converter valores numéricos (que podem vir como string ou number do DB via JSON) para `number` para os inputs numéricos.
    * **Submissão do Formulário (`onSubmit` function):**
        * Assegurar que todos os campos do `UCFormValuesFromZod` sejam incluídos no objeto `submissionData`.
        * Converter o objeto `Date` de `data_conexao` para uma string no formato `YYYY-MM-DD` antes de enviar para a Edge Function.
        * Para campos numéricos opcionais, se o valor do formulário for uma string vazia ou `undefined`, converter para `null` antes da submissão.
        * Garantir que o payload final para `createUCMutation.mutateAsync` e `updateUCMutation.mutateAsync` corresponda aos tipos `Insert` e `Update` da tabela `unidades_consumidoras` do Supabase.

5.  **Manter Padrões:**
    * Continuar utilizando a estrutura existente com `react-hook-form`, `FormField`, `FormControl`, etc.
    * Assegurar que as chamadas às Edge Functions (`criar-unidade-consumidora`, `atualizar-unidade-consumidora`) estejam corretas.
    * Utilizar o sistema de `toast` para feedback ao usuário.

Por favor, ajude-me a modificar o arquivo `src/pages/ucs/UCForm.tsx` para implementar essas expansões e refinamentos, fornecendo os snippets de código necessários para o schema Zod, exemplos de `FormField` para os novos tipos de campo (especialmente Selects e DatePicker), e os ajustes nas funções `onSubmit` e no `useEffect` de carregamento de dados.