Sim, vamos a isso!

Aqui está um prompt revisado e focado para o Cursor AI, com ênfase na correção da interface do usuário do PlantaSolarForm.tsx para implementar corretamente a estrutura de Accordion e os campos conforme discutido. Este prompt assume que as alterações de backend (nova coluna fabricante_inversor e atualização da Supabase Function criar-planta-solar) foram feitas ou serão feitas conforme o prompt anterior. Se precisar que eu inclua essas partes novamente, me avise.

Prompt para Cursor AI: Correção e Refinamento da Interface do Formulário de Cadastro de Plantas Solares

Contexto da Tarefa:
O formulário de cadastro de Plantas Solares, localizado em src/pages/plantas_solares/PlantaSolarForm.tsx, precisa ser refatorado para melhorar a experiência do usuário (UX). A implementação atual (conforme imagem image_fd12cc.png) não reflete o design planejado com seções recolhíveis (Accordion) e a correta disposição dos campos.

Objetivo Principal:
Modificar o arquivo src/pages/plantas_solares/PlantaSolarForm.tsx para:

Implementar a estrutura de seções recolhíveis utilizando o componente Accordion de shadcn/ui.
Garantir que o campo "Fabricante do Inversor" seja um Select obrigatório.
Distribuir corretamente todos os campos (incluindo os novos e os existentes) dentro das seções do Accordion, utilizando um layout de grid para melhor organização.
Assegurar que o schema Zod (plantaSolarSchema) esteja alinhado com os campos do formulário, suas obrigatoriedades e tipos.
Instruções Detalhadas para src/pages/plantas_solares/PlantaSolarForm.tsx:

Importações Necessárias:

Garanta a importação dos componentes Accordion, AccordionContent, AccordionItem, AccordionTrigger de @/components/ui/accordion.
Importe FabricanteEnum de @/lib/database.types.ts (ou do local correto onde os tipos do Supabase são definidos/gerados após a adição da coluna fabricante_inversor).
TypeScript

// Exemplo:
import { FabricanteEnum } from '@/lib/database.types'; // Ajuste o caminho se necessário
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
// Outros imports necessários (Input, Button, Form, FormField, etc.)
Crie uma lista de opções para o select de fabricantes a partir do FabricanteEnum:
TypeScript

const fabricantesOptions = Object.values(FabricanteEnum).map(value => ({
  value,
  label: value, // Considere criar um mapeamento para labels mais amigáveis se o enum for técnico
}));
Atualização do Schema Zod (plantaSolarSchema):

Verifique se o schema Zod (geralmente definido no mesmo arquivo ou importado) inclui o campo fabricante_inversor e se as obrigatoriedades estão corretas:
TypeScript

// ... outras definições do schema
fabricante_inversor: z.nativeEnum(FabricanteEnum, {
  required_error: "Selecione o fabricante do inversor.",
}),
apelido: z.string().min(3, "O apelido deve ter pelo menos 3 caracteres."),
fabricante_planta_id: z.string().min(1, "O Identificador no Fabricante é obrigatório."),
cep: z.string().regex(/^\d{5}-\d{3}$/, "CEP inválido."),
logradouro: z.string().min(1, "Logradouro é obrigatório."),
numero: z.string().min(1, "Número é obrigatório."),
bairro: z.string().min(1, "Bairro é obrigatório."),
cidade: z.string().min(1, "Cidade é obrigatória."),
uf: z.string().length(2, "UF deve ter 2 caracteres."),
complemento: z.string().optional().nullable(),
data_instalacao: z.date().optional().nullable(),
cliente_id: z.string().uuid({ message: "Selecione um cliente válido." }).optional().nullable(),
credencial_id: z.string().uuid({ message: "Selecione uma credencial válida." }).optional().nullable(),
tipo_instalacao: z.nativeEnum(InstallationTypeEnum).optional().nullable(), // Assumindo que InstallationTypeEnum já existe
numero_modulos: z.coerce.number().int().positive().optional().nullable(),
potencia_modulo: z.coerce.number().positive().optional().nullable(),
potencia_inversor: z.coerce.number().positive().optional().nullable(),
area_ocupada: z.coerce.number().positive().optional().nullable(),
// ... demais campos
Atenção: Adicione asteriscos (*) aos FormLabel dos campos que são obrigatórios no schema.
Implementação da Estrutura Accordion:

No return do componente, substitua a lista linear de campos pela estrutura de Accordion:
TypeScript

<Form {...form}>
  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
    <Accordion type="multiple" defaultValue={["dados-planta"]} className="w-full">
      {/* Seção 1: Dados da Nova Planta Solar */}
      <AccordionItem value="dados-planta">
        <AccordionTrigger>Dados da Nova Planta Solar</AccordionTrigger>
        <AccordionContent className="pt-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
            {/* Campos FormField desta seção aqui */}
          </div>
        </AccordionContent>
      </AccordionItem>

      {/* Seção 2: Endereço da Planta */}
      <AccordionItem value="endereco-planta">
        <AccordionTrigger>Endereço da Planta</AccordionTrigger>
        <AccordionContent className="pt-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4">
            {/* Campos FormField desta seção aqui */}
          </div>
        </AccordionContent>
      </AccordionItem>

      {/* Seção 3: Informações sobre o Sistema e Equipamentos (Opcional) */}
      <AccordionItem value="info-sistema">
        <AccordionTrigger>Informações sobre o Sistema e Equipamentos (Opcional)</AccordionTrigger>
        <AccordionContent className="pt-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4">
            {/* Campos FormField desta seção aqui */}
          </div>
        </AccordionContent>
      </AccordionItem>
    </Accordion>

    <Button type="submit" disabled={form.formState.isSubmitting || isLoading}>
      {form.formState.isSubmitting ? 'Salvando...' : (isEditing ? 'Salvar Alterações' : 'Cadastrar Planta Solar')}
    </Button>
  </form>
</Form>
Distribuição e Implementação dos Campos FormField nas Seções do Accordion:

Seção 1: value="dados-planta" (Dados da Nova Planta Solar)

Layout: className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4"
Campos:
apelido (Input Text)
fabricante_inversor (Implementar como FormField contendo Select de shadcn/ui, populado com fabricantesOptions. Label: "Fabricante do Inversor *")
TypeScript

<FormField
  control={form.control}
  name="fabricante_inversor"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Fabricante do Inversor *</FormLabel>
      <Select onValueChange={field.onChange} defaultValue={field.value} value={field.value || undefined}>
        <FormControl>
          <SelectTrigger>
            <SelectValue placeholder="Selecione o fabricante" />
          </SelectTrigger>
        </FormControl>
        <SelectContent>
{fabricantesOptions.map(option => ( <SelectItem key={option.value} value={option.value}> {option.label} </SelectItem> ))} </SelectContent> </Select> <FormMessage /> </FormItem> )} /> ```
fabricante_planta_id (Input Text, Label: "Nº de Série do Inversor / ID da Planta no Fabricante *")
cliente_id (Select para clientes. Verifique se há um componente SelectClientes reutilizável ou crie o FormField com Select padrão. Assegure o carregamento da lista de clientes e o estado de isLoadingClientes.)
data_instalacao (DatePicker usando Popover e Calendar de shadcn/ui. Label: "Data de Instalação")
credencial_id (Select para credenciais. Assegure o carregamento das credenciais do usuário e o estado de isLoadingCredenciais. Label: "Credencial de Integração")
Seção 2: value="endereco-planta" (Endereço da Planta)

Layout: className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4"
Campos:
cep (Input Text com máscara #####-### e lógica de busca de endereço via API BrasilAPI. Label: "CEP *")
logradouro (Input Text. Label: "Logradouro *")
numero (Input Text. Label: "Número *")
complemento (Input Text. Label: "Complemento")
bairro (Input Text. Label: "Bairro *")
cidade (Input Text. Label: "Cidade *")
uf (Input Text, com validação para 2 caracteres. Label: "UF *")
Seção 3: value="info-sistema" (Informações sobre o Sistema e Equipamentos - Opcional)

Layout: className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4"
Campos:
tipo_instalacao (Select populado com InstallationTypeEnum - verifique se este enum e suas opções estão disponíveis. Label: "Tipo de Instalação")
numero_modulos (Input type="number". Label: "Número de Módulos")
potencia_modulo (Input type="number". Label: "Potência do Módulo (Wp)")
potencia_inversor (Input type="number". Label: "Potência do Inversor (kW)")
area_ocupada (Input type="number". Label: "Área Ocupada (m²)")
Revisão Geral do Formulário:

Certifique-se de que todos os componentes FormField usem FormLabel, FormControl, e FormMessage corretamente.
Verifique se a lógica de isLoading, isEditing, e a função onSubmit estão funcionando corretamente com os novos campos e estrutura.
Garanta que o estado inicial do formulário (defaultValues) inclua fabricante_inversor: null ou undefined e que os defaultValues para modo de edição (plantaSolarData) mapeiem corretamente.
Teste a responsividade do formulário com a estrutura de Accordion e o layout de grid.
Lembretes:

Siga rigorosamente as "Boas Práticas e Regras de Código ModularOne".
Priorize código limpo, modular e com tipagem estrita.
Foque na usabilidade e clareza da interface para o usuário final.